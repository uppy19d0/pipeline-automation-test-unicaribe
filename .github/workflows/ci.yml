name: CI/CD - Comprehensive Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npx prettier --check "src/**/*" "__tests__/**/*"

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure JUnit output path
        run: echo "JEST_JUNIT_OUTPUT=reports/junit/junit.xml" >> $GITHUB_ENV

      - name: Run tests with coverage + JUnit
        run: npm test

      - name: Publish test results (JUnit) to Checks
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests (Jest) - Node ${{ matrix.node-version }}
          path: reports/junit/junit.xml
          reporter: jest-junit
          fail-on-error: false

      - name: Upload artifacts (reports + coverage)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-node-${{ matrix.node-version }}
          path: |
            reports/**
            coverage/**
          if-no-files-found: warn
          retention-days: 7

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build (and load) Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ci-simple-node-project:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container smoke test
        timeout-minutes: 5
        run: |
          set -euo pipefail
          docker run -d --name test-container -p 3000:3000 ci-simple-node-project:latest
          for i in {1..30}; do
            if curl -fsS http://localhost:3000/health > /dev/null; then
              echo "Health OK"
              break
            fi
            sleep 1
            if [ $i -eq 30 ]; then
              echo "Healthcheck failed, dumping logs..."
              docker logs test-container || true
              exit 1
            fi
          done
          docker stop test-container >/dev/null
          docker rm test-container >/dev/null

  notify-email:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, docker-build]
    if: always()
    env:
      SMTP_SERVER:   ${{ secrets.SMTP_SERVER }}
      SMTP_PORT:     ${{ secrets.SMTP_PORT }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SMTP_TO:       ${{ secrets.SMTP_TO }}
      SMTP_FROM:     ${{ secrets.SMTP_FROM }}
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-artifacts-node-*
          merge-multiple: true

      - name: Send email on failure
        if: ${{ failure() && github.event_name == 'push' && env.SMTP_SERVER != '' && env.SMTP_PORT != '' && env.SMTP_USERNAME != '' && env.SMTP_PASSWORD != '' && env.SMTP_TO != '' && env.SMTP_FROM != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ env.SMTP_SERVER }}
          server_port: ${{ env.SMTP_PORT }}
          secure: true
          username: ${{ env.SMTP_USERNAME }}
          password: ${{ env.SMTP_PASSWORD }}
          subject: "❌ CI falló — ${{ github.repository }} #${{ github.run_number }}"
          from: "CI Bot <${{ env.SMTP_FROM }}>"
          to: ${{ env.SMTP_TO }}
          html_body: |
            <p>El pipeline <b>falló</b> para <code>${{ github.ref_name }}</code> en <code>${{ github.repository }}</code>.</p>
            <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Ver ejecución</a></p>
          attachments: |
            reports/junit/junit.xml
            coverage/lcov.info
          nodemailerdebug: true

      - name: Send email on success
        if: ${{ success() && github.event_name == 'push' && env.SMTP_SERVER != '' && env.SMTP_PORT != '' && env.SMTP_USERNAME != '' && env.SMTP_PASSWORD != '' && env.SMTP_TO != '' && env.SMTP_FROM != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ env.SMTP_SERVER }}
          server_port: ${{ env.SMTP_PORT }}
          secure: true
          username: ${{ env.SMTP_USERNAME }}
          password: ${{ env.SMTP_PASSWORD }}
          subject: "✅ CI OK — ${{ github.repository }} #${{ github.run_number }}"
          from: "CI Bot <${{ env.SMTP_FROM }}>"
          to: ${{ env.SMTP_TO }}
          html_body: |
            <p>El pipeline <b>pasó</b> para <code>${{ github.ref_name }}</code> en <code>${{ github.repository }}</code>.</p>
            <ul>
              <li>Checks de pruebas publicados en la pestaña <i>Checks</i>.</li>
              <li>Artefactos: reportes y coverage adjuntos.</li>
            </ul>
            <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Ver ejecución</a></p>
          attachments: |
            reports/junit/junit.xml
            coverage/lcov.info
          nodemailerdebug: true
